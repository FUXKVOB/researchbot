# bot.py
import asyncio
import os
import json
import time
import sqlite3
from datetime import datetime
from typing import List, Dict, Any, Optional
import aiohttp
import logging
import backoff
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å reportlab –¥–ª—è PDF; –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ—Å—Ç–æ –±—É–¥–µ–º –æ—Ç–¥–∞–≤–∞—Ç—å .md
try:
    from reportlab.lib.pagesizes import A4
    from reportlab.pdfgen import canvas
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont
    REPORTLAB_AVAILABLE = True
    # --- –î–û–ë–ê–í–õ–ï–ù–ò–ï ---
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —à—Ä–∏—Ñ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, DejaVuSans.ttf)
    FONT_PATH = "DejaVuSans.ttf"
    if os.path.exists(FONT_PATH):
        pdfmetrics.registerFont(TTFont('DejaVuSans', FONT_PATH))
        PDF_FONT_NAME = 'DejaVuSans'
    else:
        # –ï—Å–ª–∏ —à—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É, –Ω–æ —ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç "–∫–≤–∞–¥—Ä–∞—Ç—ã"
        PDF_FONT_NAME = 'Helvetica'
        logging.warning("–§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ DejaVuSans.ttf –Ω–µ –Ω–∞–π–¥–µ–Ω. PDF –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã.")
except Exception:
    REPORTLAB_AVAILABLE = False
    PDF_FONT_NAME = None # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()

DB_PATH = os.getenv('BOT_DB_PATH', 'bot_state.db')

# -----------------------
# Helpers for SQLite
# -----------------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute('''
    CREATE TABLE IF NOT EXISTS researches (
        chat_id INTEGER PRIMARY KEY,
        topic TEXT,
        data TEXT,
        status TEXT,
        start_time REAL
    )
    ''')
    cur.execute('''
    CREATE TABLE IF NOT EXISTS user_settings (
        chat_id INTEGER PRIMARY KEY,
        settings_json TEXT
    )
    ''')
    conn.commit()
    conn.close()

def save_research_to_db(chat_id: int, topic: str, data: dict, status: str, start_time: float):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute('REPLACE INTO researches (chat_id, topic, data, status, start_time) VALUES (?,?,?,?,?)',
                (chat_id, topic, json.dumps(data, ensure_ascii=False), status, start_time))
    conn.commit()
    conn.close()

def delete_research_from_db(chat_id: int):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute('DELETE FROM researches WHERE chat_id = ?', (chat_id,))
    conn.commit()
    conn.close()

def load_user_settings(chat_id: int) -> dict:
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute('SELECT settings_json FROM user_settings WHERE chat_id = ?', (chat_id,))
    row = cur.fetchone()
    conn.close()
    if row:
        return json.loads(row[0])
    return {}

def save_user_settings(chat_id: int, settings: dict):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute('REPLACE INTO user_settings (chat_id, settings_json) VALUES (?,?)',
                (chat_id, json.dumps(settings, ensure_ascii=False)))
    conn.commit()
    conn.close()

# -----------------------
# API clients
# -----------------------
class SerperAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Serper API"""
    def __init__(self, api_key: str, per_request_timeout: float = 10.0):
        self.api_key = api_key
        self.base_url = "https://google.serper.dev"
        self.per_request_timeout = per_request_timeout

    @backoff.on_exception(backoff.expo, aiohttp.ClientError, max_tries=5, factor=2)
    async def search(self, query: str, search_type: str = "search", num_results: int = 15) -> Dict[Any, Any]:
        headers = {
            'X-API-KEY': self.api_key,
            'Content-Type': 'application/json'
        }
        payload = {
            'q': query,
            'num': num_results,
            'hl': 'ru',
            'gl': 'ru'
        }
        try:
            timeout = aiohttp.ClientTimeout(total=self.per_request_timeout)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(f"{self.base_url}/{search_type}", headers=headers, json=payload) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"Serper API error status: {response.status}")
                        response.raise_for_status()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Serper search: {e}")
            raise

class MistralGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mistral API"""
    def __init__(self, api_key: str, per_request_timeout: float = 30.0):
        self.api_key = api_key
        self.base_url = "https://api.mistral.ai/v1/chat/completions"
        self.per_request_timeout = per_request_timeout

    @backoff.on_exception(backoff.expo, aiohttp.ClientError, max_tries=5)
    async def generate_report(self, findings: List[Dict[str, str]], topic: str, system_instructions: Optional[str] = None) -> str:
        findings_text = "\n\n".join([f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {f['title']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {f['snippet']}\n–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω–¥–µ–∫—Å: [{f.get('_source_index','')}] ({f.get('link','')})"
                                     for f in findings])
        system_prompt = system_instructions or (
            "–í—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ü–∏—à–∏—Ç–µ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º, –∫—Ä–∞—Ç–∫–æ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ. "
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≥–∞–Ω—ã. –î–∞—ë—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –≤–∏–¥–µ [1], [2] –∏ —Ç.–¥. "
            "–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π—Ç–µ —Ñ–∞–∫—Ç—ã ‚Äî –æ–ø–∏—Ä–∞–π—Ç–µ—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏."
        )
        user_prompt = f"""
–ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Ö–æ–¥–æ–∫, —Å–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤—è–∑–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç–µ–º–µ "{topic}". –†–∞–∑–±–µ–π—Ç–µ –Ω–∞ —Ä–∞–∑–¥–µ–ª—ã:
1) –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
2) –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã (bullet points)
3) –¢—Ä–µ–Ω–¥—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
4) –í—ã–∑–æ–≤—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
5) –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ù–∏–∂–µ ‚Äî –¥–∞–Ω–Ω—ã–µ:
{findings_text}
"""
        headers = {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "Authorization": f"Bearer {self.api_key}"
        }
        payload = {
            "model": "mistral-large-latest",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            "temperature": 0.2,
        }
        try:
            timeout = aiohttp.ClientTimeout(total=self.per_request_timeout)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(self.base_url, headers=headers, json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    if data and 'choices' in data and data['choices']:
                        choice = data['choices'][0]
                        if 'message' in choice and 'content' in choice['message']:
                            return choice['message']['content']
                        if 'text' in choice:
                            return choice['text']
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Mistral API."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Mistral generate_report: {e}")
            raise

# -----------------------
# Main bot
# -----------------------
class ResearchBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.serper_api_key = os.getenv('SERPER_API_KEY')
        self.mistral_api_key = os.getenv('MISTRAL_API_KEY')
        self.max_results_default = int(os.getenv('MAX_RESULTS_PER_QUERY', 15))
        self.max_concurrent = int(os.getenv('MAX_CONCURRENT_SEARCHES', 3))
        self.deep_analysis_default = os.getenv('DEEP_ANALYSIS_ENABLED', 'true').lower() == 'true'
        self.default_lang = os.getenv('DEFAULT_LANG', 'ru')

        self.serper = SerperAPI(self.serper_api_key, per_request_timeout=float(os.getenv('SERPER_REQ_TIMEOUT', 10.0)))
        self.llm_generator = MistralGenerator(self.mistral_api_key, per_request_timeout=float(os.getenv('MISTRAL_REQ_TIMEOUT', 30.0)))

        self._tasks: Dict[int, asyncio.Task] = {}
        self.active_researches: Dict[int, Dict[str, Any]] = {}

        init_db()

    # ---------- Utilities ----------
    def _get_user_settings(self, chat_id: int) -> dict:
        settings = load_user_settings(chat_id)
        if not settings:
            settings = {
                'max_results': self.max_results_default,
                'deep_analysis': self.deep_analysis_default,
                'lang': self.default_lang
            }
            save_user_settings(chat_id, settings)
        return settings

    # ---------- Bot handlers ----------
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_text = (
            "üî¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Research Bot!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ —Ç–µ–º–µ.\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/research &lt;—Ç–µ–º–∞&gt; - –Ω–∞—á–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n"
            "/status - —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n"
            "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n"
            "/settings - –ø–æ–∫–∞–∑–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø—Ä–∏–º–µ—Ä: /settings sources 10)\n"
            "/sources - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (—Ç–µ–∫—É—â–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è)\n"
        )
        await update.message.reply_text(welcome_text, parse_mode='HTML')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = (
            "üîç <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "1) /research &lt;—Ç–µ–º–∞&gt; ‚Äî –Ω–∞—á–∞—Ç—å\n"
            "2) –ü—Ä–æ—Å–ª–µ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç)\n"
            "3) –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚Äî –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –∏ PDF\n\n"
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            "/settings sources &lt;—á–∏—Å–ª–æ&gt;\n"
            "/settings depth on|off\n"
            "/settings lang ru|en\n"
        )
        await update.message.reply_text(help_text, parse_mode='HTML')

    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        args = context.args
        current = self._get_user_settings(chat_id)
        if not args:
            text = f"‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>:\n" \
                   f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {current['max_results']}\n" \
                   f"–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑: {'–≤–∫–ª' if current['deep_analysis'] else '–≤—ã–∫–ª'}\n" \
                   f"–Ø–∑—ã–∫ –æ—Ç—á–µ—Ç–∞: {current['lang']}\n\n" \
                   "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n" \
                   "/settings sources 10\n" \
                   "/settings depth on\n" \
                   "/settings lang en"
            await update.message.reply_text(text, parse_mode='HTML')
            return

        if len(args) >= 2:
            key = args[0].lower()
            value = args[1].lower()
            if key in ['sources', 'source', 'max', 'max_results']:
                try:
                    val = int(value)
                    current['max_results'] = max(1, min(50, val))
                    save_user_settings(chat_id, current)
                    await update.message.reply_text(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {current['max_results']}")
                except ValueError:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: /settings sources 10")
            elif key in ['depth', 'deep', 'analysis', 'deep_analysis']:
                if value in ['on', 'true', '1', 'yes']:
                    current['deep_analysis'] = True
                elif value in ['off', 'false', '0', 'no']:
                    current['deep_analysis'] = False
                else:
                    await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ on –∏–ª–∏ off. –ü—Ä–∏–º–µ—Ä: /settings depth on")
                    return
                save_user_settings(chat_id, current)
                await update.message.reply_text(f"‚úÖ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑: {'–≤–∫–ª' if current['deep_analysis'] else '–≤—ã–∫–ª'}")
            elif key in ['lang', 'language']:
                if value not in ['ru', 'en']:
                    await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: ru, en. –ü—Ä–∏–º–µ—Ä: /settings lang en")
                    return
                current['lang'] = value
                save_user_settings(chat_id, current)
                await update.message.reply_text(f"‚úÖ –Ø–∑—ã–∫ –æ—Ç—á–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value}")
            else:
                await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞. –°–º–æ—Ç—Ä–∏ /help")
        else:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: /settings sources 10")

    async def research_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É: /research –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –º–µ–¥–∏—Ü–∏–Ω–µ")
            return
        topic = " ".join(context.args)
        await self.start_research(update, topic)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        topic = (update.message.text or "").strip()
        if not topic or topic.startswith('/'):
            return
        if len(topic) < 5:
            await update.message.reply_text("‚ùå –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        await self.start_research(update, topic)

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        if chat_id in self.active_researches:
            r = self.active_researches[chat_id]
            elapsed = int(time.time() - r['start_time'])
            text = f"üìä <b>–ê–∫—Ç–∏–≤–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ</b>\n–¢–µ–º–∞: {r['topic']}\n–í—Ä–µ–º—è: {elapsed} —Å–µ–∫\n–°—Ç–∞—Ç—É—Å: {r.get('status','running')}"
        else:
            text = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π."
        await update.message.reply_text(text, parse_mode='HTML')

    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        if chat_id in self._tasks:
            task = self._tasks[chat_id]
            task.cancel()
            if chat_id in self.active_researches:
                self.active_researches[chat_id]['status'] = 'cancelled'
                save_research_to_db(chat_id, self.active_researches[chat_id]['topic'], self.active_researches[chat_id], 'cancelled', self.active_researches[chat_id]['start_time'])
            del self._tasks[chat_id]
            await update.message.reply_text("‚ùå –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

    async def sources_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        if chat_id not in self.active_researches:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return
        research = self.active_researches[chat_id]
        sources = research.get('sources_list', [])
        if not sources:
            await update.message.reply_text("üì≠ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        out_lines = []
        for idx, s in enumerate(sources, start=1):
            out_lines.append(f"{idx}. {s.get('title','')} - {s.get('link','')}")
        txt = "\n".join(out_lines)
        fname = f"sources_{chat_id}_{int(time.time())}.txt"
        await update.effective_chat.send_document(document=txt.encode('utf-8'), filename=fname, caption="üìö –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        data = query.data
        if data and data.startswith("download_pdf_"):
            chat_id = int(data.split("_")[-1])
            if chat_id in self.active_researches:
                research = self.active_researches[chat_id]
                md_text = research.get('full_report_text_md', '')
                pdf_bytes = self._render_pdf_bytes(research['topic'], md_text) if REPORTLAB_AVAILABLE else None
                if pdf_bytes:
                    await context.bot.send_document(chat_id=chat_id, document=pdf_bytes, filename=f"report_{research['topic'][:30].replace(' ', '_')}.pdf")
                else:
                    await context.bot.send_message(chat_id=chat_id, text="‚ùó PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (reportlab –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω). –û—Ç–ø—Ä–∞–≤–ª—è—é Markdown.")
                    await context.bot.send_document(chat_id=chat_id, document=md_text.encode('utf-8'), filename=f"report_{research['topic'][:30].replace(' ', '_')}.md")
            else:
                await query.edit_message_text("‚ö†Ô∏è –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # ---------- Research flow ----------
    async def start_research(self, update: Update, topic: str):
        chat_id = update.effective_chat.id
        if chat_id in self._tasks:
            await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ. –û—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /cancel –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return

        settings = self._get_user_settings(chat_id)
        max_results = settings['max_results']
        deep_analysis = settings['deep_analysis']
        lang = settings['lang']

        start_msg = await update.message.reply_text(
            f"üî¨ <b>–ù–∞—á–∏–Ω–∞—é –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ:</b>\n\"{topic}\"\n\n"
            "–Ø –æ—Ç–ø—Ä–∞–≤–ª—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", parse_mode='HTML'
        )
        progress_message_id = start_msg.message_id
        metadata = {
            'topic': topic,
            'progress_message_id': progress_message_id,
            'start_time': time.time(),
            'status': 'running',
            'settings': settings
        }
        self.active_researches[chat_id] = metadata
        save_research_to_db(chat_id, topic, metadata, 'running', metadata['start_time'])

        task = asyncio.create_task(self._research_task_runner(chat_id, topic, progress_message_id, settings))
        self._tasks[chat_id] = task

        await update.message.reply_text("‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∑–¥–µ—Å—å.")

    async def _research_task_runner(self, chat_id: int, topic: str, progress_message_id: int, settings: dict):
        try:
            results = await self._run_research_logic(topic, chat_id, progress_message_id, settings)
            md_text = self._build_report_markdown(results)
            results['full_report_text_md'] = md_text
            results['sources_list'] = results.get('sources', [])

            self.active_researches[chat_id].update({
                'status': 'done',
                'completed_time': int(time.time() - self.active_researches[chat_id]['start_time']),
                'full_report_text_md': md_text,
                'sources_list': results['sources_list']
            })
            save_research_to_db(chat_id, topic, self.active_researches[chat_id], 'done', self.active_researches[chat_id]['start_time'])

            try:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=progress_message_id,
                    text=f"‚úÖ <b>–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n–¢–µ–º–∞: {topic}\n–í—Ä–µ–º—è: {self.active_researches[chat_id]['completed_time']} —Å",
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            md_filename = f"report_{topic.replace(' ','_')[:40]}_{int(time.time())}.md"
            await self.application.bot.send_document(
                chat_id=chat_id,
                document=md_text.encode('utf-8'),
                filename=md_filename,
                caption=f"üìã <b>–û—Ç—á—ë—Ç:</b> {topic}",
                parse_mode='HTML'
            )

            kb = [[InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å PDF", callback_data=f"download_pdf_{chat_id}")]]
            if not REPORTLAB_AVAILABLE:
                kb.append([InlineKeyboardButton("‚ÑπÔ∏è PDF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ reportlab)", callback_data=f"noop_{chat_id}")])
            reply_markup = InlineKeyboardMarkup(kb)
            await self.application.bot.send_message(chat_id=chat_id, text="–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç –≤ PDF:", reply_markup=reply_markup)

        except asyncio.CancelledError:
            logger.info(f"Research task cancelled for {chat_id}")
            if chat_id in self.active_researches:
                self.active_researches[chat_id]['status'] = 'cancelled'
                save_research_to_db(chat_id, topic, self.active_researches[chat_id], 'cancelled', self.active_researches[chat_id]['start_time'])
            try:
                await self.application.bot.send_message(chat_id=chat_id, text="‚ùå –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            except Exception:
                pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏: {e}", exc_info=True)
            try:
                await self.application.bot.send_message(chat_id=chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
            except Exception:
                pass
            if chat_id in self.active_researches:
                self.active_researches[chat_id]['status'] = 'error'
                save_research_to_db(chat_id, topic, self.active_researches[chat_id], 'error', self.active_researches[chat_id]['start_time'])
        finally:
            if chat_id in self._tasks:
                del self._tasks[chat_id]

    async def _run_research_logic(self, topic: str, chat_id: int, progress_message_id: int, settings: dict) -> dict:
        results = {
            'topic': topic,
            'searches': [],
            'key_findings': [],
            'sources': [],
            'timestamp': datetime.now().isoformat()
        }
        queries = await self.generate_search_queries(topic, settings)
        total_steps = len(queries) + 3
        current_step = 0

        semaphore = asyncio.Semaphore(self.max_concurrent)

        async def search_with_semaphore(query):
            async with semaphore:
                try:
                    resp = await asyncio.wait_for(self.serper.search(query, num_results=settings['max_results']), timeout=self.serper.per_request_timeout + 2)
                    return resp
                except asyncio.TimeoutError:
                    logger.warning(f"Timeout Serper for query: {query}")
                    return {}
                except Exception as e:
                    logger.error(f"Serper error for query {query}: {e}")
                    return {}

        for i in range(0, len(queries), self.max_concurrent):
            batch = queries[i:i + self.max_concurrent]
            tasks = [asyncio.create_task(search_with_semaphore(q)) for q in batch]
            batch_results = await asyncio.gather(*tasks, return_exceptions=True)
            for j, res in enumerate(batch_results):
                current_step += 1
                await self._update_progress(chat_id, progress_message_id, current_step, total_steps, f"üîç –ü–æ–∏—Å–∫ ({current_step}/{total_steps})")
                if isinstance(res, dict) and res.get('organic'):
                    r_items = res.get('organic', [])[:settings['max_results']]
                    results['searches'].append({'query': batch[j], 'results': r_items})
                    for item in r_items:
                        if item.get('snippet'):
                            src_index = len(results['sources']) + 1
                            results['key_findings'].append({
                                'title': item.get('title',''),
                                'snippet': item.get('snippet'),
                                'link': item.get('link',''),
                                '_source_index': src_index
                            })
                            results['sources'].append({'title': item.get('title',''), 'link': item.get('link','')})
                await asyncio.sleep(0.2)
            await asyncio.sleep(1) 

        current_step += 1
        await self._update_progress(chat_id, progress_message_id, current_step, total_steps, "üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
        await asyncio.sleep(1)

        current_step += 1
        await self._update_progress(chat_id, progress_message_id, current_step, total_steps, "üß† –°–∏–Ω—Ç–µ–∑ (LLM)")
        try:
            report_text = await asyncio.wait_for(
                self.llm_generator.generate_report(results['key_findings'], topic),
                timeout=self.llm_generator.per_request_timeout + 5
            )
        except asyncio.TimeoutError:
            logger.warning("Mistral timeout")
            report_text = "‚ö†Ô∏è LLM –Ω–µ —É—Å–ø–µ–ª–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"Mistral error: {e}")
            report_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}"

        results['full_report_text'] = report_text

        current_step += 1
        await self._update_progress(chat_id, progress_message_id, current_step, total_steps, "üìÑ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞")
        await asyncio.sleep(0.5)

        return results

    async def generate_search_queries(self, topic: str, settings: dict) -> List[str]:
        base_queries = [
            f"{topic} –æ–±–∑–æ—Ä",
            f"{topic} –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
            f"{topic} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã–µ",
            f"{topic} —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏–µ",
            f"{topic} –ø—Ä–æ–±–ª–µ–º—ã –≤—ã–∑–æ–≤—ã",
            f"{topic} —Ä–µ—à–µ–Ω–∏—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏",
            f"{topic} –ø—Ä–æ–≥–Ω–æ–∑—ã",
            f"{topic} —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ"
        ]
        if settings.get('deep_analysis'):
            base_queries.extend([
                f"{topic} case study –ø—Ä–∏–º–µ—Ä",
                f"{topic} –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç—á–µ—Ç",
                f"{topic} –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏"
            ])
        return base_queries[:self.max_concurrent * 4]

    async def _update_progress(self, chat_id: int, message_id: int, step: int, total: int, current_step_name: str):
        pct = int(step * 100 / max(1, total))
        blocks = int(pct / 5)
        progress_bar = "‚ñà" * blocks + "‚ñë" * (20 - blocks)
        text = f"üî¨ <b>–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n" \
               f"<b>–≠—Ç–∞–ø:</b> {current_step_name}\n" \
               f"<b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> [{progress_bar}] {pct}% ({step}/{total})"
        try:
            await self.application.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, parse_mode='HTML')
        except Exception as e:
            try:
                await self.application.bot.send_message(chat_id=chat_id, text=f"{current_step_name} ‚Äî {pct}%")
            except Exception:
                logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ")

    def _build_report_markdown(self, results: dict) -> str:
        md = ""
        md += f"# –û—Ç—á—ë—Ç: {results.get('topic','')}\n\n"
        md += f"*–°–æ–∑–¥–∞–Ω–æ: {results.get('timestamp')}\n\n---\n\n"
        md += "## –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (LLM)\n\n"
        md += results.get('full_report_text', '') + "\n\n"
        md += "\n---\n\n## –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏ (—Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º)\n\n"
        for i, kf in enumerate(results.get('key_findings', []), start=1):
            src_idx = kf.get('_source_index') or i
            md += f"{i}. **{kf.get('title','')}** ‚Äî {kf.get('snippet','')}  [{src_idx}]\n\n"
        md += "\n---\n\n## –ò—Å—Ç–æ—á–Ω–∏–∫–∏\n\n"
        for idx, s in enumerate(results.get('sources', []), start=1):
            md += f"{idx}. [{s.get('title','')}]({s.get('link','')})\n"
        return md

    def _render_pdf_bytes(self, title: str, md_text: str) -> bytes:
        from io import BytesIO
        buffer = BytesIO()
        c = canvas.Canvas(buffer, pagesize=A4)
        width, height = A4
        x_margin = 40
        y = height - 60
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–°–ü–û–õ–¨–ó–£–ï–ú –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–ô –®–†–ò–§–¢ ---
        font_name = PDF_FONT_NAME if PDF_FONT_NAME and PDF_FONT_NAME != 'Helvetica' else 'Helvetica'
        c.setFont(font_name, 16)
        c.drawString(x_margin, y, f"–û—Ç—á—ë—Ç: {title}")
        y -= 30
        c.setFont(font_name, 10)
        for line in md_text.splitlines():
            if y < 60:
                c.showPage()
                y = height - 60
            if len(line) > 200:
                parts = [line[i:i+200] for i in range(0, len(line), 200)]
            else:
                parts = [line]
            for p in parts:
                c.drawString(x_margin, y, p)
                y -= 12
        c.save()
        buffer.seek(0)
        return buffer.read()

    # ---------- Run ----------
    def run(self):
        if not self.token:
            print("Missing TELEGRAM_BOT_TOKEN in env.")
            exit(1)
        self.application = Application.builder().token(self.token).build()
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("research", self.research_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("cancel", self.cancel_command))
        self.application.add_handler(CommandHandler("settings", self.settings_command))
        self.application.add_handler(CommandHandler("sources", self.sources_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        logger.info("üöÄ Research Bot –∑–∞–ø—É—â–µ–Ω (—Å SQLite, —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ background tasks).")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    required_vars = ['TELEGRAM_BOT_TOKEN', 'SERPER_API_KEY', 'MISTRAL_API_KEY']
    missing = [v for v in required_vars if not os.getenv(v)]
    if missing:
        print("Missing env vars:", ", ".join(missing))
        exit(1)
    bot = ResearchBot()
    try:
        bot.run()
    except KeyboardInterrupt:
        print("\nüõë Stopped by user")
    except Exception as e:
        logger.error("Critical error: %s", e, exc_info=True)
        print("Critical error:", e)